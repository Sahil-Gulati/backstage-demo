apiVersion: backstage.io/v1beta2
kind: Template
# some metadata about the template itself
metadata:
  name: ServicePackageTemplate
  title: Service package template
  description: Service package template from go-platform-shared-templates
spec:
  owner: backstage/techdocs-core
  type: service

  # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: Details of the go service package
      required:
        - name
        - need_database
      properties:
        name:
          title: Name
          type: string
          description: Name of the service
        need_database:
          title: Is database needed?
          type: string
          enum:
            - "y"
            - "n"
          description: Need of the database

    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template
        cookiecutterCompat: true
        values:
          service_name: "{{ parameters.name }}"
          need_database: "{{ parameters.component }}"
          repo_full_path: "{{ parameters.repoUrl }}"
          repo_base_path: "github.com/gelatoas"
          repo_name: "{{ parameters.name }}"
          ecr_repo_name: "{{ parameters.name }}"
          helm_chart_name: "{{ parameters.name }}"
          helm_chart_pgp_name: "{{ parameters.name }}"
          helm_chart_pgp_key: "TBD"
          sentry_dsn: "TBD"
          sonar_project_key: "TBD"
          newrelic_key: "TBD"
          kubernetes_namespace: "TBD"
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: "This is {{ parameters.name }}"
        repoUrl: "{{ parameters.repoUrl }}"

  output:
    remoteUrl: "{{ steps.publish.output.remoteUrl }}"
    entityRef: "{{ steps.register.output.entityRef }}"
